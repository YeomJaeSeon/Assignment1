openapi: 3.0.0
info:
  description: 게시판 CRUD API 명세
  version: 1.0.0
  title: 게시판 CRUD
  contact:
    email: qkrskdjf@naver.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://3.36.121.236'
tags:
  - name: page
    description: 페이지
  - name: post
    description: 게시글
  - name: auth
    description: 인증
  - name: search
    description: 검색
  - name: comment
    description: 댓글
  - name: subcomment
    description: 대댓글
components:
  schemas:
    User:
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: '1234'
    Page:
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        count:
          type: integer
          example: 1
    Post:
      properties:
        id:
          type: string
          example: 6181712f78e5357ebeedc59c
        create_at:
          type: string
          format: date
          example: 2021-11-02T17:11:11.737Z
        updated_at:
          type: string
          format: date
          example: 2021-11-02T17:26:22.613Z
        title:
          type: string
          example: 나만의 게시글2
        userEmail:
          type: string
          example: tt@example.com
        text:
          type: string
          example: 나만의 게시글 - 내용
        category:
          type: string
          example: 일상
        count:
          type: integer
          format: int64
          example: 1
        views:
          type: array
          items:
            type: string
            example: 61814d9e72f3ac6c4dd4db78
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      properties:
        postId:
          type: string
          example: 6181712f78e5357ebeedc59c
        text:
          type: string
          example: 수정된 댓글23232323
        userId:
          type: string
          example: 61814d9e72f3ac6c4dd4db78
        email:
          type: string
          example: ymz3819@example.com
        subComments:
          type: array
          example: []
        created_at:
          type: string
          format: date
          example: 2021-11-02T17:15:15.899Z
        updated_at:
          type: string
          format: date
          example: 2021-11-02T17:15:15.899Z
        id:
          type: string
          example: 61817223b861ae7ef4e54389
    SubComment:
      properties:
        text:
          type: string
          example: 대댓글-test
        userId:
          type: string
          example: 61814d9e72f3ac6c4dd4db78
        email:
          type: string
          example: ymz3819@example.com
        commentId:
          type: string
          example: 61817223b861ae7ef4e54389
        created_at:
          type: string
          format: date
          example: 2021-11-02T20:28:56.287Z
        updated_at:
          type: string
          format: date
          example: 2021-11-02T20:28:56.287Z
        id:
          type: string
          example: 61819f88bf06015b10fdb002
  requestBodies:
    createPost:
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: 나만의 게시글
              text:
                type: string
                example: 나만의 게시글 내용이에요
              category:
                type: string
                example: 일상
      description: request data to create post
      required: true
    updatePost:
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: 나만의 게시글
              text:
                type: string
                example: 나만의 게시글 내용이에요
      description: request data to update post
      required: true
    createUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: request data to create user
      required: true
    loginUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: request data for user login
      required: true
    createComment:
      content:
        application/json:
          schema:
            properties:
              postId:
                type: string
                example: 6181712f78e5357ebeedc59c
              text:
                type: string
                example: 요리관련 댓글5
      description: request data to create comment
      required: true
    updateComment:
      content:
        application/json:
          schema:
            properties:
              commentId:
                type: string
                example: 61817228b861ae7ef4e5438a
              text:
                type: string
                example: 요리관련 수정 댓글6
      description: request data to create comment
      required: true
paths:
  /page:
    get:
      summary: 페이지를 반환합니다.
      tags:
        - page
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
          example: 1
          required: true
        - name: offset
          in: query
          schema:
            type: integer
            format: int64
          example: 1
          required: true
      responses:
        '200':
          description: 페이지 요청 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '404':
          description: Page not found
  /search/category:
    get:
      summary: 게시글을 카테고리로 조회합니다.
      tags:
        - search
      parameters:
        - name: category
          in: query
          schema:
            type: string
          example: 일상
          required: true
      responses:
        '200':
          description: 게시글 요청 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
  /search/title:
    get:
      summary: 게시글을 제목으로 조회합니다.
      tags:
        - search
      parameters:
        - name: title
          in: query
          schema:
            type: string
          example: 나만의 게시글
          required: true
      responses:
        '200':
          description: 게시글 요청 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
  /search/email:
    get:
      summary: 게시글을 카테고리로 조회합니다.
      tags:
        - search
      parameters:
        - name: email
          in: query
          schema:
            type: integer
            format: int64
          example: user@example.com
          required: true
      responses:
        '200':
          description: 게시글 요청 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
  /post:
    get:
      summary: 게시글을 반환합니다.
      tags:
        - post
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: 6181712f78e5357ebeedc59c
          required: true
      responses:
        '200':
          description: 게시글 요청 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    post:
      summary: 게시글을 작성합니다.
      tags:
        - post
      requestBody:
        $ref: '#/components/requestBodies/createPost'
      responses:
        '200':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Upload Success
                  data:
                    $ref: '#/components/schemas/Post'
        '401':
          description: jwt must be provided
        '404':
          description: UserId not found
    patch:
      summary: 게시글을 수정합니다.
      tags:
        - post
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: 1
          required: true
      requestBody:
        $ref: '#/components/requestBodies/updatePost'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Update Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Post not found
    delete:
      summary: 게시글을 삭제합니다.
      tags:
        - post
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: 6181712f78e5357ebeedc59c
          required: true
      responses:
        '200':
          description: 게시글 삭제 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Update Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Post not found
  /auth/signup:
    post:
      summary: 회원가입 합니다.
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/createUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: boolean
                    example: true
                  userInfo:
                    properties:
                      id:
                        type: string
                        example: 6181ae21bf06015b10fdb005
                      email:
                        type: string
                        example: user@example.com
                  message:
                    type: string
                    example: signup successful
        '404':
          description: email already exist
  /auth/login:
    post:
      summary: 로그인합니다.
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/loginUser'
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Success Login
        '404':
          description: email not found
  /auth/logout:
    get:
      summary: 로그아웃 합니다.
      tags:
        - auth
      responses:
        '200':
          description: logout success
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: logout
        '404':
          description: user not found
  /auth/refresh:
    get:
      summary: AccessToken 재발급
      tags:
        - auth
      responses:
        '400':
          description: Access token is not expired!
        '401':
          description: No authorized
        '403':
          description: Access token and refresh token are need for refresh!
        '404':
          description: user not found
  /comment:
    get:
      summary: 댓글을 반환합니다.
      tags:
        - comment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6181712f78e5357ebeedc59c
          required: true
      responses:
        '200':
          description: 댓글 요청 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
    post:
      summary: 댓글을 작성합니다.
      tags:
        - comment
      requestBody:
        $ref: '#/components/requestBodies/createComment'
      responses:
        '200':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                properties:
                  postId:
                    type: string
                    example: 6181a9a6bf06015b10fdb003
                  comment:
                    $ref: '#/components/schemas/Comment'
                  message:
                    type: string
                    example: Upload Success
        '401':
          description: jwt must be provided
        '404':
          description: UserId not found
    patch:
      summary: 댓글을 수정합니다.
      tags:
        - comment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 61817223b861ae7ef4e54389
          required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                text:
                  type: string
                  example: 수정된 댓글
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Update Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Comment not found
    delete:
      summary: 댓글을 삭제합니다.
      tags:
        - comment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6181b7eabf06015b10fdb008
          required: true
      responses:
        '200':
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Delete Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Comment not found
  /subcomment:
    get:
      summary: 대댓글을 반환합니다.
      tags:
        - subcomment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6181b8fdbf06015b10fdb009
          required: true
      responses:
        '200':
          description: 대댓글 반환 성공
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubComment'
        '404':
          description: Comment not found
    post:
      summary: 대댓글을 작성합니다.
      tags:
        - subcomment
      requestBody:
        content:
          application/json:
            schema:
              properties:
                commentId:
                  type: string
                  example: 6181b8fdbf06015b10fdb009
                test:
                  type: string
                  example: 대댓글입니다
      responses:
        '200':
          description: 대댓글 작성 성공
          content:
            application/json:
              schema:
                properties:
                  comment:
                    properties:
                      id:
                        type: string
                        example: 6181b8fdbf06015b10fdb009
                      created_at:
                        type: string
                        format: date
                        example: 2021-11-02T22:17:33.166Z
                      updated_at:
                        type: string
                        format: date
                        example: 2021-11-02T22:22:43.649Z
                      postId:
                        type: string
                        example: 6181a9a6bf06015b10fdb003
                      subComments:
                        type: array
                        items:
                          $ref: '#/components/schemas/SubComment'
                      email:
                        type: string
                        example: tt@example.com
                      text:
                        type: string
                        example: 요리관련 댓글5
                      userId:
                        type: string
                        example: 6181ae21bf06015b10fdb005
                  message:
                    type: string
                    example: Upload Success
        '401':
          description: jwt must be provided
        '404':
          description: UserId not found
    patch:
      summary: 대댓글을 수정합니다.
      tags:
        - subcomment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6181ba52bf06015b10fdb00e
          required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                text:
                  type: string
                  example: 수정된 대댓글
      responses:
        '200':
          description: 대댓글 수정 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Update Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Comment not found
    delete:
      summary: 대댓글을 삭제합니다.
      tags:
        - subcomment
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6181ba52bf06015b10fdb00e
          required: true
      responses:
        '200':
          description: 대댓글 삭제 성공
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Delete Success
        '401':
          description: jwt must be provided
        '403':
          description: You don't have edit permission
        '404':
          description: Comment not found
